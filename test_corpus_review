#!/usr/bin/python3
#	x509sak - The X.509 Swiss Army Knife white-hat certificate toolkit
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of x509sak.
#
#	x509sak is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	x509sak is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with x509sak; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import sqlite3
import contextlib
import os
import subprocess
from x509sak.FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Examine results of a test corpus run.")
parser.add_argument("-d", "--dbfile", metavar = "filename", type = str, default = "test_corpus_results.sqlite3", help = "Specifies database file to use. Defaults to %(default)s.")
parser.add_argument("-o", "--outdir", metavar = "path", type = str, default = "test_corpus_failures", help = "Specifies output file to write failed certificates to. Defaults to %(default)s.")
args = parser.parse_args(sys.argv[1:])

with contextlib.suppress(FileExistsError):
	os.makedirs(args.outdir)

db = sqlite3.connect(args.dbfile)
cursor = db.cursor()
(total_results, ) = cursor.execute("SELECT COUNT(*) FROM test_results;").fetchone()
(failed_results, ) = cursor.execute("SELECT COUNT(*) FROM test_results WHERE returncode != 0;").fetchone()
print("Found %d results total, %d which failed." % (total_results, failed_results))

for row in cursor.execute("SELECT domainname, returncode, stdout, stderr, db_filename, der_cert FROM test_results WHERE returncode != 0 ORDER BY id ASC;").fetchall():
	(domainname, returncode, stdout, stderr, db_filename, der_cert) = row
	print("%-30s returncode %d" % (domainname, returncode))
	outfile_pem = args.outdir + "/" + domainname + ".pem"
	outfile_txt = args.outdir + "/" + domainname + ".txt"
	with open(outfile_txt, "w") as f:
		print("Returncode: %d" % (returncode), file = f)
		print("Database  : %s" % (db_filename), file = f)
		print(file = f)
		print("=" * 120, file = f)
		print(file = f)
		print("stdout:", file = f)
		print(stdout.decode(), file = f)
		print(file = f)
		print("=" * 120, file = f)
		print(file = f)
		print("stderr:", file = f)
		print(stderr.decode(), file = f)
	subprocess.check_output([ "openssl", "x509", "-inform", "der", "-out", outfile_pem ], input = der_cert)

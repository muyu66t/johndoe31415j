<%inherit file="x509certificate.ader" />
<%namespace file="dn.ader" import="*" />

<%
	declare_parameter("field", [ "subject", "issuer" ])
	declare_parameter("mode", [ "empty", "rdn_empty_string", "no_cn", "multiple_cn", "rdn_illegal_char", "rdn_deprecated_type", "rdn_non_printable", "unusually_many_rdns", "duplicate_rdns", "rdn_malformed", "rdn_length_exceeded", "rdn_multivalued", "rdn_duplicate_key", "rdn_duplicate_key_value" ])
	(field, mode) = (str(p("field")), str(p("mode")))
	export_var("filename", "dn_" + field + "_" + mode)

	errcode = {
		"subject":	"X509Cert_Body_Subject_",
		"issuer":	"X509Cert_Body_Issuer_",
	}.get(field, "?")
	errcode += {
		"empty":					"Empty",
		"unusually_many_rdns":		"UnusuallyManyRDNs",
		"duplicate_rdns":			"DuplicateRDNs",
		"no_cn":					"NoCN",
		"multiple_cn":				"MultipleCN",
		"rdn_illegal_char":			"RDN_IllegalCharacter",		#
		"rdn_deprecated_type":		"RDN_DeprecatedType",		#
		"rdn_non_printable":		"RDN_NonPrintable",			#
		"rdn_empty_string":			"RDN_EmptyString",
		"rdn_malformed":			"RDN_Malformed",
		"rdn_length_exceeded":		"RDN_LengthExceeded",
		"rdn_multivalued":			"RDN_MultiValuedRDN",
		"rdn_duplicate_key":		"RDN_DuplicateSet_Key",
		"rdn_duplicate_key_value":	"RDN_DuplicateSet_KeyValue",
	}.get(mode, "?")

	if "?" in errcode:
		error(errcode, field, mode)
	export_var("errcode", errcode)
%>

<%block name="issuer">
	<% (field, mode, errcode) = import_vars("field", "mode", "errcode") %>
%if field != "issuer":
	${create_dn_cn("X.509 DistinguishedName " + str(p("field")) + " with mode: " + str(p("mode")), errcode = errcode)}
%else:
${render_error(mode)}
%endif
</%block>

<%block name="subject">
	<% (field, mode, errcode) = import_vars("field", "mode", "errcode") %>
%if field != "subject":
	${create_dn_cn("X.509 DistinguishedName " + str(p("field")) + " with mode: " + str(p("mode")), errcode = errcode)}
%else:
${render_error(mode)}
%endif
</%block>

<%def name="render_error(error_type)">
%if error_type == "no_cn":
${create_rdn_o("orga but no common name")}
${create_rdn_c("DE")}
${create_rdn_ou("this is the OU again no common name")}

%elif error_type == "multiple_cn":
${create_rdn_cn("first CN")}
${create_rdn_o("orga")}
${create_rdn_cn("second CN")}

%elif error_type == "rdn_illegal_char":
SET {
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.3 }
		PrintableString { "Abdefg <nonprintable>" }
	}
}

%elif error_type == "rdn_deprecated_type":
SET {
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.3 }
		T61String { "This is a TeletexString" }
	}
}

%elif error_type == "rdn_non_printable":
SET {
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.3 }
		OBJECT_IDENTIFIER { 1.2.3.4.5 }
	}
}

%elif error_type == "unusually_many_rdns":
%for i in range(1, 50):
SET {
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.${i} }
		UTF8String { "RDN ${i}" }
	}
}
%endfor

%elif error_type == "duplicate_rdns":
${create_rdn_c("AB")}
${create_rdn_cn("Common name")}
${create_rdn_c("CD")}

%elif error_type == "rdn_malformed":

%elif error_type == "rdn_length_exceeded":
${create_rdn_c("this is much too long")}

%elif error_type == "rdn_multivalued":
${create_rdn_cn("Common name")}
SET {
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.3 }
		UTF8String { "RDN 3" }
	}
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.4 }
		UTF8String { "RDN 4" }
	}
}

%elif error_type == "rdn_duplicate_key":
SET {
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.3 }
		UTF8String { "RDN 3" }
	}
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.4 }
		UTF8String { "RDN 4" }
	}
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.3 }
		UTF8String { "RDN 3 again" }
	}
}

%elif error_type == "rdn_duplicate_key_value":
SET {
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.3 }
		UTF8String { "RDN 3" }
	}
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.4 }
		UTF8String { "RDN 4" }
	}
	SEQUENCE {
		OBJECT_IDENTIFIER { 2.5.4.3 }
		UTF8String { "RDN 3" }
	}
}

%elif error_type == "empty":

%elif error_type == "rdn_empty_string":
${create_rdn_cn("")}

%else:
${error("Unknown distinguished name", error_type)}
%endif
</%def>
